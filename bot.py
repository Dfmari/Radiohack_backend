import os
import telebot
import base64
from dotenv import load_dotenv

load_dotenv()

BOT_TOKEN = os.getenv("BOT_API_TOKEN")

if not BOT_TOKEN:
    raise ValueError("‚ùå No BOT_API_TOKEN found! Check .env or GitHub Secrets.")

bot = telebot.TeleBot(BOT_TOKEN)
uname = ''
uid = 'EMPTY_UID'

bot.set_my_commands([
    telebot.types.BotCommand("/start", "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"),
    telebot.types.BotCommand("/help", "–ö–æ–º–∞–Ω–¥—ã"),
    telebot.types.BotCommand("/play", "–ò–≥—Ä–∞—Ç—å"),
    telebot.types.BotCommand("/top", "–õ–∏–¥–µ—Ä–±–æ—Ä–¥"),
    telebot.types.BotCommand("/me", "–í–∞—à —Ä–µ–π—Ç–∏–Ω–≥"),
    telebot.types.BotCommand("/setname", "–ü–æ–º–µ–Ω—è—Ç—å –Ω–∏–∫"),
    telebot.types.BotCommand("/debug", "–ù–µ –∑–∞–±—É–¥—å —É–¥–∞–ª–∏—Ç—å ;)"),
])

@bot.message_handler(commands=['start'])
def start(message, headless=False):
    global uname, uid
    if not headless:
        bot.send_message(message.chat.id, "üîç –ü—Ä–∏–≤–µ—Ç –¥–µ—Ç–µ–∫—Ç–∏–≤ üîç \n.... –ù–∞–¥–æ —Å–¥–µ–ª–∞—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ \n /play –∫—Å—Ç–∞—Ç–∏ —Å—Å—ã–ª–∫—É –≤—ã–¥–∞—ë—Ç)")
    user = message.from_user
    if user.first_name == None:
        uname = "NO_USERNAME"
    else:
        uname = user.first_name
    uid = user.id

    '''
    SQL DATABASE ACTION
    
    –û—Ç–ø—Ä–∞–≤–ª—è–µ–º uname –∫–∞–∫ –Ω–∏–∫ –∏ uid –∫–∞–∫ –∫–ª—é—á –≤ –±–∞–∑—É Users
    
    SQL DATABASE ACTION
    '''



@bot.message_handler(commands=['help'])
def help(message):
    bot.send_message(message.chat.id, r"""
üìö **–ö–æ–º–∞–Ω–¥—ã –ë–æ—Ç–∞** üìö 
    
‚ÑπÔ∏è /help –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —ç—Ç–æ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ 
üéÆ /play –î–∞—ë—Ç –≤–∞–º —Å—Å—ã–ª–∫—É –Ω–∞ –∏–≥—Ä—É
üèÜ /top –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞ –ª–∏–¥–µ—Ä–æ–≤ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É
üòé /me –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞ –∫–∞–∫–æ–º –º–µ—Å—Ç–µ –≤—ã –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ 
‚úçÔ∏è /setname –ü–æ–º–µ–Ω—è–π —Å–≤–æ–π –Ω–∏–∫ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ
üõ†Ô∏è /debug –ù–µ –∑–∞–±—É–¥—å —É–¥–∞–ª–∏—Ç—å ;\)""",
parse_mode="MarkdownV2")


@bot.message_handler(commands=['debug'])
def debug(message):
    user = message.from_user

    bot.send_message(message.chat.id, f"""
üÜî User ID: {user.id}              
üë§ First Name: {user.first_name}    
üìõ Last Name: {user.last_name}      
üåê Username: @{user.username}       
üì± Language: {user.language_code}  
ü§ñ Is Bot: {user.is_bot}
""")

@bot.message_handler(commands=['play'])
def play(message):
    global uid
    if uid == 'EMPTY_UID':
        start(message, True)
    bot.send_message(message.chat.id, f"–í–æ—Ç –≤–∞—à–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –∏–≥—Ä—É \n https://radiohack-website.vercel.app/game?uid=" + str(uid))


@bot.message_handler(commands=['top'])
def top(message):
    bot.send_message(message.chat.id, 'this feature is WIP')
    '''
    SQL DATABASE ACTION
    
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º uname –∏ score –¥–ª—è –ø–µ—Ä–≤—ã—Ö 5? –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é score
    
    SQL DATABASE ACTION
    '''
    leader1 = "Placeholder1"
    score1 = 100
    leader2 = "Placeholder2"
    score2 = 99
    leader3 = "Placeholder3"
    score3 = 98
    leader4 = "Placeholder4"
    score4 = 97
    leader5 = "Placeholder5"
    score5 = 96

    top = [[leader1, score1], [leader2, score2], [leader3, score3], [leader4, score4], [leader5, score5]]
    message_top = '''
üèÜ –õ–∏–¥–µ—Ä—ã üèÜ  
'''
    for i in range(len(top)):
        if i == 0:
            emoji = 'ü•á'
        elif i == 1:
            emoji = 'ü•à'
        elif i == 2:
            emoji = 'ü•â'
        else :
            emoji = '‚≠ê'

        message_top += f'\n{emoji} {top[i][0]} {top[i][1]}pts'
    bot.send_message(message.chat.id, message_top)



@bot.message_handler(commands=['me'])
def me(message):
    global uname, uid
    '''
    SQL DATABASE ACTION

    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –º–µ—Å—Ç–æ –¥–∞–Ω–Ω–æ–≥–æ uid –≤ —Å–ø–∏—Å–∫–µ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ score

    SQL DATABASE ACTION
    '''
    bot.send_message(message.chat.id, 'this feature is WIP')

@bot.message_handler(commands=['/setname'])
def get_name(message):
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–≤—ã–π –Ω–∏–∫')
    bot.register_next_step_handler(message, set_name)

def set_name(message):
    global uname
    old_uname = uname
    uname = message.text
    if not uname.isalpha():
        bot.send_message(message.chat.id, '‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –Ω–∏–∫ –º–æ–∂–µ—Ç—å –±—ã—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–º)')
        uname = old_uname
        return
    else:
        bot.send_message(message.chat.id, '‚úÖ –ù–∏–∫ –æ–±–Ω–æ–≤–ª—ë–Ω')
'''
            SQL DATABASE ACTION

            –ó–∞–º–µ–Ω—è–µ–º –≤ Users –∏–º—è old_uname –Ω–∞ uname

            SQL DATABASE ACTION
            '''


bot.infinity_polling()