import os
import telebot
from dotenv import load_dotenv
import psycopg2

load_dotenv()
BOT_TOKEN = os.getenv("BOT_API_TOKEN")

if not BOT_TOKEN:
    print("‚ùå No BOT_API_TOKEN found! Check .env or GitHub Secrets.")

# Define parameters
bot = telebot.TeleBot(BOT_TOKEN)
uname = ''
uid = 'EMPTY_UID'

# Set bot commands
bot.set_my_commands([
    telebot.types.BotCommand("/start", "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"),
    telebot.types.BotCommand("/help", "–ö–æ–º–∞–Ω–¥—ã"),
    telebot.types.BotCommand("/play", "–ò–≥—Ä–∞—Ç—å"),
    telebot.types.BotCommand("/top", "–õ–∏–¥–µ—Ä–±–æ—Ä–¥"),
    telebot.types.BotCommand("/me", "–í–∞—à —Ä–µ–π—Ç–∏–Ω–≥"),
    telebot.types.BotCommand("/setname", "–ü–æ–º–µ–Ω—è—Ç—å –Ω–∏–∫"),
    telebot.types.BotCommand("/debug", "–ù–µ –∑–∞–±—É–¥—å —É–¥–∞–ª–∏—Ç—å ;)"),
])


# Helper function to get a database connection
def get_db_connection():
    try:
        conn = psycopg2.connect(
            os.environ["DATABASE_URL"],
            sslmode="verify-full",
            sslrootcert=os.getenv("SSL_CERT"),
        )
        return conn
    except psycopg2.Error as e:
        print(f"Database connection error: {e}")
        return None


@bot.message_handler(commands=['start'])
def start(message):
    global uname, uid

    # Collecting user data
    user = message.from_user
    uname = user.first_name or "NO_USERNAME"
    uid = user.id

    # Creating a connection to the database
    conn = get_db_connection()
    if conn is None:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return

    try:
        with conn.cursor() as db:
            # Checking if the user exists
            db.execute("SELECT * FROM users WHERE uid = %s", (uid,))
            existing_user = db.fetchone()
            if not existing_user:
                # If needed, adding the user to the database
                db.execute(
                    "INSERT INTO users (uid, uname, score) VALUES (%s, %s, %s)",
                    (uid, uname, 0)
                )
                conn.commit()

                # Informing user if not in headless mode
                bot.send_message(message.chat.id, "üëã –ü—Ä–∏–≤–µ—Ç—Å–≤—É—é! –≤—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è –∏–≥—Ä—ã. \n –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –∏–∑ /play –∏ –∏–≥—Ä–∞–π—Ç–µ.")
            else:
                bot.send_message(message.chat.id, "üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! \n –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –∏–∑ /play –∏ –∏–≥—Ä–∞–π—Ç–µ.")
    except psycopg2.Error as e:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        print(f"Database error: {e}")
    finally:
        conn.close()

# Showing all commands and their usage to user
@bot.message_handler(commands=['help'])
def help(message):
    bot.send_message(message.chat.id, r"""
üìö **–ö–æ–º–∞–Ω–¥—ã –ë–æ—Ç–∞** üìö 

‚ÑπÔ∏è /help –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —ç—Ç–æ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ 
üéÆ /play –î–∞—ë—Ç –≤–∞–º —Å—Å—ã–ª–∫—É –Ω–∞ –∏–≥—Ä—É
üèÜ /top –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞ –ª–∏–¥–µ—Ä–æ–≤ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É
üòé /me –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞ –∫–∞–∫–æ–º –º–µ—Å—Ç–µ –≤—ã –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ 
‚úçÔ∏è /setname –ü–æ–º–µ–Ω—è–π —Å–≤–æ–π –Ω–∏–∫ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ
üõ†Ô∏è /debug –ù–µ –∑–∞–±—É–¥—å —É–¥–∞–ª–∏—Ç—å ;\)""",
                     parse_mode="MarkdownV2")


@bot.message_handler(commands=['play'])
def play(message):
    global uid
    # If no uid found running start in headless mode to fetch user data
    if uid == 'EMPTY_UID':
        start(message, True)
    # Sending user personal url with query of user uid
    bot.send_message(message.chat.id, f"–í–æ—Ç –≤–∞—à–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –∏–≥—Ä—É \n https://radiohack-website.vercel.app/game?uid=" + str(uid))


@bot.message_handler(commands=['top'])
def top(message):

    # Creating a connection to the database
    conn = get_db_connection()
    if conn is None:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return

    try:
        # Fetching top 5 scorers
        with conn.cursor() as db:
            db.execute("""
                       SELECT uname, score FROM users
                       ORDER BY score DESC LIMIT 5;
                       """)
            leaders = db.fetchall()

            message = '''
üèÜ –õ–∏–¥–µ—Ä—ã üèÜ  
'''
            # Constructing leaders list message
            for idx, (username, score) in enumerate(leaders):
                if idx == 0:
                    emoji = 'ü•á'
                elif idx == 1:
                    emoji = 'ü•à'
                elif idx == 2:
                    emoji = 'ü•â'
                else:
                    emoji = '‚≠ê'
                message += f"\n{emoji} {username}: {score} pts"

            bot.send_message(message.chat.id, message)
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞")
        print(f'Error getting leaders: {e}')
    finally:
        conn.close()


@bot.message_handler(commands=['me'])
def me(message):
    global uname, uid

    # If uid or uname not found running start in headless mode to fetch user data
    if uid == 'EMPTY_UID' or uname == '':
        start(message, True)

    # Creating a connection to the database
    conn = get_db_connection()
    if conn is None:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return

    try:
        # fetching all users and finding the needed one 
        with conn.cursor() as cursor:
            cursor.execute('''
                           WITH RankedUsers AS (SELECT *, RANK() OVER (ORDER BY score DESC) AS rank FROM users)
                           SELECT rank, username, score FROM RankedUsers WHERE uid = %s;
                           ''', (uid,))
            result = cursor.fetchone()

        if result:
            position, username, score = result
            response = f"–¢–≤–æ–µ –º–µ—Å—Ç–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ: {position}\n–ò–º—è: {username}\n–û—á–∫–∏: {score}"
        else:
            response = "Ô∏èÔ∏è‚ö†Ô∏è–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω."

        bot.send_message(message.chat.id, response)
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        print(f'–û—à–∏–±–∫–∞ –≤ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}')
    finally:
        conn.close()


@bot.message_handler(commands=['setname'])
def get_name(message):
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–≤—ã–π –Ω–∏–∫')
    bot.register_next_step_handler(message, set_name)


def set_name(message):
    global uname
    new_username = message.text
    if not new_username.isalpha():
        bot.send_message(message.chat.id, '‚ùå –ù–∏–∫ –º–æ–∂–µ—Ç—å –±—ã—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–º)')
        return
    else:
        bot.send_message(message.chat.id, '‚úÖ –ù–∏–∫ –æ–±–Ω–æ–≤–ª—ë–Ω')
        conn = get_db_connection()
        if conn is None:
            bot.send_message(message.chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            return

        try:
            with conn.cursor() as cursor:
                cursor.execute("UPDATE users SET username=%s WHERE uid=%s;", (new_username, uid))
                conn.commit()
            uname = new_username
        except Exception as e:
            bot.send_message(message.chat.id, f'–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–º–µ–Ω–∏: {e}')
        finally:
            conn.close()


bot.infinity_polling()
