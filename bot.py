import os
import telebot
import base64
from dotenv import load_dotenv
import psycopg2

load_dotenv()

BOT_TOKEN = os.getenv("BOT_API_TOKEN")
USER = os.getenv("user")
PASSWORD = os.getenv("password")
HOST = os.getenv("host")
PORT = os.getenv("port")
DBNAME = os.getenv("dbname")

if not BOT_TOKEN:
    raise ValueError("‚ùå No BOT_API_TOKEN found! Check .env or GitHub Secrets.")

try:
    connection = psycopg2.connect(
        user=USER,
        password=PASSWORD,
        host=HOST,
        port=PORT,
        dbname=DBNAME
    )
    
    # Create a cursor to execute SQL queries
    cursor = connection.cursor()
except Exception as e:
    print(f"Failed to connect: {e}")

bot = telebot.TeleBot(BOT_TOKEN)
uname = ''
uid = 'EMPTY_UID'

bot.set_my_commands([
    telebot.types.BotCommand("/start", "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"),
    telebot.types.BotCommand("/help", "–ö–æ–º–∞–Ω–¥—ã"),
    telebot.types.BotCommand("/play", "–ò–≥—Ä–∞—Ç—å"),
    telebot.types.BotCommand("/top", "–õ–∏–¥–µ—Ä–±–æ—Ä–¥"),
    telebot.types.BotCommand("/me", "–í–∞—à —Ä–µ–π—Ç–∏–Ω–≥"),
    telebot.types.BotCommand("/setname", "–ü–æ–º–µ–Ω—è—Ç—å –Ω–∏–∫"),
    telebot.types.BotCommand("/debug", "–ù–µ –∑–∞–±—É–¥—å —É–¥–∞–ª–∏—Ç—å ;)"),
])

@bot.message_handler(commands=['start'])
def start(message, headless=False):
    global uname, uid
    if not headless:
        bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ –±–æ—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏–≥—Ä—É, –ø–æ –∫–Ω–æ–ø–∫–∞–º —Ç—ã –Ω–∞–π–¥–µ—à—å –≤—Å—é –≤–∞–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é \n /play –∫—Å—Ç–∞—Ç–∏ —Å—Å—ã–ª–∫—É –≤—ã–¥–∞—ë—Ç)")
    user = message.from_user
    if user.first_name == None:
        uname = "NO_USERNAME"
    else:
        uname = user.first_name
    uid = user.id

    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        cursor.execute('SELECT * FROM users WHERE id=%s', (uid,))
        existing_user = cursor.fetchone()
        
        if existing_user is None:
            insert_query = """INSERT INTO users(id, username) VALUES (%s, %s);"""
            data_to_insert = (uid, uname)
            cursor.execute(insert_query, data_to_insert)
            connection.commit()  # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            
            bot.send_message(message.chat.id, f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –Ω–æ–≤–∏—á–∫–∞ {uname}, —Ç–µ–ø–µ—Ä—å —Ç—ã –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!")
        else:
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
            update_query = """UPDATE users SET username=%s WHERE id=%s;"""
            data_to_update = (uname, uid)
            cursor.execute(update_query, data_to_update)
            connection.commit()
            
            bot.send_message(message.chat.id, f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {uname}. –¢–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: {e}")


@bot.message_handler(commands=['help'])
def help(message):
    bot.send_message(message.chat.id, r"""
üìö **–ö–æ–º–∞–Ω–¥—ã –ë–æ—Ç–∞** üìö 
    
‚ÑπÔ∏è /help –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —ç—Ç–æ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ 
üéÆ /play –î–∞—ë—Ç –≤–∞–º —Å—Å—ã–ª–∫—É –Ω–∞ –∏–≥—Ä—É
üèÜ /top –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞ –ª–∏–¥–µ—Ä–æ–≤ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É
üòé /me –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞ –∫–∞–∫–æ–º –º–µ—Å—Ç–µ –≤—ã –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ 
‚úçÔ∏è /setname –ü–æ–º–µ–Ω—è–π —Å–≤–æ–π –Ω–∏–∫ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ
üõ†Ô∏è /debug –ù–µ –∑–∞–±—É–¥—å —É–¥–∞–ª–∏—Ç—å ;\)""",
parse_mode="MarkdownV2")


@bot.message_handler(commands=['debug'])
def debug(message):
    user = message.from_user

    bot.send_message(message.chat.id, f"""
üÜî User ID: {user.id}              
üë§ First Name: {user.first_name}    
üìõ Last Name: {user.last_name}      
üåê Username: @{user.username}       
üì± Language: {user.language_code}  
ü§ñ Is Bot: {user.is_bot}
""")

@bot.message_handler(commands=['play'])
def play(message):
    global uid
    if uid == 'EMPTY_UID':
        start(message, True)
    bot.send_message(message.chat.id, f"–í–æ—Ç –≤–∞—à–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –∏–≥—Ä—É \n https://radiohack-website.vercel.app/game?uid=" + str(uid))


@bot.message_handler(commands=['top'])
def top(message):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –æ—á–∫–æ–≤
        cursor.execute("""
            SELECT username, score 
            FROM users 
            ORDER BY score DESC LIMIT 5;
        """)
        leaders = cursor.fetchall()
        
        message_top = '''
üèÜ –õ–∏–¥–µ—Ä—ã üèÜ  
'''
        for idx, (username, score) in enumerate(leaders):
            if idx == 0:
                emoji = 'ü•á'
            elif idx == 1:
                emoji = 'ü•à'
            elif idx == 2:
                emoji = 'ü•â'
            else:
                emoji = '‚≠ê'
                
            message_top += f"\n{emoji} {username}: {score} pts"
        
        bot.send_message(message.chat.id, message_top)
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞: {e}")



@bot.message_handler(commands=['me'])
def me(message):
    global uname, uid
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞ —Å—Ä–µ–¥–∏ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        cursor.execute('''
            WITH RankedUsers AS (
                SELECT *, RANK() OVER (ORDER BY score DESC) AS rank
                FROM users
            )
            SELECT rank, username, score 
            FROM RankedUsers 
            WHERE id=%s;
        ''', (uid,))
        result = cursor.fetchone()
        
        if result:
            position, username, score = result
            response = f"–¢–≤–æ–µ –º–µ—Å—Ç–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ: {position}\n–ò–º—è: {username}\n–û—á–∫–∏: {score}"
        else:
            response = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω."
        
        bot.send_message(message.chat.id, response)
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–∏: {e}")

@bot.message_handler(commands=['/setname'])
def get_name(message):
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–≤—ã–π –Ω–∏–∫')
    bot.register_next_step_handler(message, set_name)

def set_name(message):
    global uname
    new_username = message.text
    if not new_username.isalpha():
        bot.send_message(message.chat.id, '‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –Ω–∏–∫ –º–æ–∂–µ—Ç—å –±—ã—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–º)')
        return
    else:
        bot.send_message(message.chat.id, '‚úÖ –ù–∏–∫ –æ–±–Ω–æ–≤–ª—ë–Ω')
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            cursor.execute("UPDATE users SET username=%s WHERE id=%s;", (new_username, uid))
            connection.commit()
            uname = new_username
        except Exception as e:
            bot.send_message(message.chat.id, f'–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–º–µ–Ω–∏: {e}')


bot.infinity_polling()
